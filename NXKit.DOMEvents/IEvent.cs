namespace NXKit.DOMEvents
{

    /// <summary>
    /// The Event interface provides basic contextual information about an event to all registered event handlers. Specific events can also implement other derived interfaces, for example the UIEvent and MouseEvent interfaces
    /// </summary>
    public interface IEvent
    {

        /// <summary>
        /// The name of the event type. Specifications that define events, content authors, and authoring tools must use case-sensitive event type names.
        /// </summary>
        string Type { get; }

        /// <summary>
        /// Used to retrieve the event target associated with the Event dispatch and DOM event flow.
        /// </summary>
        IEventTarget Target { get; }

        /// <summary>
        /// Used to retrieve the current event target whose EventListeners are currently being processed. This is particularly useful during the capture and bubbling phases.
        /// </summary>
        IEventTarget CurrentTarget { get; }

        /// <summary>
        /// Used to indicate the phase of the event's current propagation path (capture, target, or bubble). The event flow phases are defined in Event dispatch and DOM event flow.
        /// </summary>
        EventPhase EventPhase { get; }

        /// <summary>
        /// Used to indicate whether or not an event is a bubbling event. If the event can bubble the value must be true, otherwise the value must be false.
        /// </summary>
        bool Bubbles { get; }

        /// <summary>
        /// Used to indicate whether or not an event can have its default action prevented (see also Default actions and cancelable events). If the default action can be prevented the value must be true, otherwise the value must be false.
        /// </summary>
        bool Cancelable { get; }

        /// <summary>
        /// Used to specify the time at which the event was created in milliseconds relative to 1970-01-01T00:00:00Z. This value is the un-initialized value of this attribute.
        /// </summary>
        ulong TimeStamp { get; }

        /// <summary>
        /// Prevents all other event listeners from being triggered for this event dispatch, excluding any remaining candidate event listeners. Once it has been called, further calls to this method have no additional effect.
        /// </summary>
        void StopPropagation();

        /// <summary>
        /// When this method is invoked, the event must be canceled, meaning any default actions normally taken by the implementation as a result of the event must not occur (see also Default actions and cancelable events). Default actions which occur prior to the event's dispatch (see Default actions and cancelable events) are reverted. Calling this method for a non-cancelable event must have no effect. If an event has more than one default action, each cancelable default action must be canceled.
        /// </summary>
        void PreventDefault();

        void InitEvent(string type, bool canBubble, bool cancelable);

        /// <summary>
        /// Prevents all other event listeners from being triggered for this event dispatch, including any remaining candidate event listeners. Once it has been called, further calls to this method have no additional effect.
        /// </summary>
        void StopImmediatePropagation();

        /// <summary>
        /// Used to indicate whether this event has been cancelled or not. Event.defaultPrevented must return true if both Event.cancelable is true and Event.preventDefault() has been called for this event. Otherwise this attribute must return false.
        /// </summary>
        bool DefaultPrevented { get; }

        /// <summary>
        /// Used to indicate whether this event was generated by the user agent (trusted) or by script (untrusted). See trusted events for more details.
        /// </summary>
        bool IsTrusted { get; }

    }

}
